AC_INIT([gparted],[0.4.6-git],[http://bugzilla.gnome.org/simple-bug-guide.cgi?product=gparted])

AC_CONFIG_SRCDIR(src/main.cc)
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])

AM_INIT_AUTOMAKE([1.9 no-dist-gzip dist-bzip2])
AM_MAINTAINER_MODE


dnl======================
dnl checks for programs 
dnl======================
AC_PROG_CC
AC_PROG_CXX
AM_PROG_LIBTOOL


dnl======================
dnl checks for other programs 
dnl======================
AC_CHECK_PROG(GKSUPROG, gksu, gksu)


dnl======================
dnl i18n stuff 
dnl======================
GETTEXT_PACKAGE=gparted
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE",[description])

AM_GLIB_GNU_GETTEXT
IT_PROG_INTLTOOL([0.35.5])


dnl======================
dnl checks for libs 
dnl======================
AC_CHECK_LIB(uuid, uuid_generate,     [], AC_MSG_ERROR([*** uuid library (libuuid) not found]))
AC_CHECK_LIB(dl, dlopen,              [], AC_MSG_ERROR([*** dl library (libdl) not found]))


dnl libparted
LIBPARTED_VERSION=1.7.1
AC_MSG_CHECKING(for libparted >= $LIBPARTED_VERSION)
LIBS_save="$LIBS"
LIBS="-lparted -luuid -ldl"
AC_TRY_RUN(
#include <stdio.h>
#include <parted/parted.h>

int main ()
{
	int min_major ;
	int min_minor ;
	int min_micro ;
	int major ;
	int minor ;
	int micro ;

	if ( sscanf( "$LIBPARTED_VERSION", "%d.%d.%d", &min_major, &min_minor, &min_micro ) == 3 )
	{
		/* Check for libparted three digit version number */
		if ( sscanf( ped_get_version(), "%d.%d.%d", &major, &minor, &micro ) == 3 )
		{
			printf( "Found libparted %s\t", ped_get_version() ) ;
			return ! ( (major > min_major) ||
			           ((major == min_major) && (minor > min_minor)) ||
			           ((major == min_major) && (minor == min_minor) && (micro >= min_micro)) ) ;
		}

		/* Check for two digit libparted version number */
		if ( sscanf( ped_get_version(), "%d.%d", &major, &minor ) == 2 )
		{
			printf( "Found libparted %s\t", ped_get_version() ) ;
			return ! ( (major > min_major) ||
			           ((major == min_major) && (minor >= min_minor)) ) ;
		}
	}

	return 1 ;
}
,AC_MSG_RESULT(OK),AC_MSG_ERROR(*** Requires libparted >= $LIBPARTED_VERSION.  Perhaps development header files missing?) )
LIBS="$LIBS_save"


dnl GTKMM
PKG_CHECK_MODULES(GTKMM, gtkmm-2.4 > 2.8 )
AC_SUBST(GTKMM_LIBS)
AC_SUBST(GTKMM_CFLAGS)


dnl======================
dnl check whether to build documentation - Gnome-Doc-Utils
dnl======================
AC_ARG_ENABLE(doc,
  [  --disable-doc           do not build documentation],,)
if test "x${enable_doc}" = "x" ; then
	enable_doc=yes
fi

AC_MSG_CHECKING(whether documentation should be built)
if test ${enable_doc} = no; then
	AC_MSG_RESULT([no])
else
	AC_MSG_RESULT([yes])
fi

if test ${enable_doc} = yes; then
	GNOME_DOC_INIT
else
	dnl Do not care if GDU is not found
	GNOME_DOC_INIT(,,[:])
fi

AM_CONDITIONAL(DISABLE_DOC, test ${enable_doc} = no)


AC_CONFIG_FILES([
Makefile
compose/Makefile
data/Makefile
data/icons/Makefile
doc/Makefile
help/Makefile
include/Makefile
src/Makefile
po/Makefile.in
])

AC_OUTPUT


dnl======================
dnl Summary
dnl======================

echo ""
echo "================ Final configuration ==================="
echo "          Installing into prefix  :  $prefix"
echo ""
echo "            Build documentation?  :  $enable_doc"
echo ""
echo " If all settings are OK, type make and make install "
echo "========================================================"
